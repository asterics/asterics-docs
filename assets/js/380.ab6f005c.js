(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{1208:function(t,e,s){"use strict";s.r(e);var a=s(2),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"timestampwriter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timestampwriter"}},[t._v("#")]),t._v(" TimestampWriter")]),t._v(" "),e("h2",{attrs:{id:"component-type-processor-subcategory-easy-reading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#component-type-processor-subcategory-easy-reading"}},[t._v("#")]),t._v(" Component Type: Processor (Subcategory: Easy Reading)")]),t._v(" "),e("p",[t._v("This plugin stores the time in milliseconds (ms) that passed by since the last reset (or start).\nOutputs are the (via date string) formatted and numerical milliseconds and also a formatted absolute UNIX epoch timestamp plus the absolute UNIX timestamp in ms.\nThe time zone of the local system is used!")]),t._v(" "),e("h2",{attrs:{id:"input-port-description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-port-description"}},[t._v("#")]),t._v(" Input Port Description")]),t._v(" "),e("p",[t._v("None. Milliseconds are either absolute Unix epoch timestamps or relative intervals between events.")]),t._v(" "),e("h2",{attrs:{id:"output-port-description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-port-description"}},[t._v("#")]),t._v(" Output Port Description")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("timePassedMs [double]")]),t._v(": Milliseconds (ms) since model start or last component reset.")]),t._v(" "),e("li",[e("strong",[t._v("timePassedFormatted [string]")]),t._v(": Milliseconds since model start or last component reset - formatted as date string.")]),t._v(" "),e("li",[e("strong",[t._v("timestampUnixMs [double]")]),t._v(": Unix timestamp in milliseconds (ms).")]),t._v(" "),e("li",[e("strong",[t._v("timestampUnixFormatted [string]")]),t._v(": Unix timestamp – absolute milliseconds formatted as date string.")])]),t._v(" "),e("h2",{attrs:{id:"event-listener-description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-listener-description"}},[t._v("#")]),t._v(" Event Listener Description")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("resetStartTimestamp")]),t._v(": Resets the start timestamp for calculating the time passed by (the first timestamp is set at model start).")]),t._v(" "),e("li",[e("strong",[t._v("sendOutputs")]),t._v(": Formats and sends outputs, triggers the event "),e("code",[t._v("timestampFormatted")]),t._v(" when outputs are available at the ports.")])]),t._v(" "),e("h2",{attrs:{id:"event-trigger-description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-trigger-description"}},[t._v("#")]),t._v(" Event Trigger Description")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("timestampFormatted")]),t._v(": Triggers when output values (formatted and as milliseconds) are available at the output ports.")])]),t._v(" "),e("h2",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("timestampFormat [string, default: “dd.MM.yyyy-HH:mm:ss.SSS”]")]),t._v(": Format that must be valid according to "),e("code",[t._v("java.text.SimpleDateFormat")]),t._v(".\nIt is used for formatting the UNIX timestamp as a date string.\nIf it is invalid or null, the default date format is used.")]),t._v(" "),e("li",[e("strong",[t._v("diffTimeFormat [string, default: “HH:mm:ss.SSS”]")]),t._v(": Format that must be valid according to "),e("code",[t._v("java.text.SimpleDateFormat")]),t._v(" but for meaningfulness with only time components.\nIt is used for formatting passed milliseconds (since start/reset) as a date string.\nIf invalid or null, the default date format is used.")])]),t._v(" "),e("p",[e("em",[t._v("Important Usage Note")]),t._v(": Only the format for time components shall be set, as otherwise the Unix epoch start date components (01.01.1970 at 00:00:00.000 o’clock) are added.\nE.g. if 5 seconds have passed by, using date components the output would look like 01.01.1970-00:00:05.000!")])])}),[],!1,null,null,null);e.default=r.exports}}]);