(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{557:function(t,e,a){"use strict";a.r(e);var r=a(2),i=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jsonreader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonreader"}},[t._v("#")]),t._v(" JsonReader")]),t._v(" "),a("h2",{attrs:{id:"component-type-processor-subcategory-easy-reading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-type-processor-subcategory-easy-reading"}},[t._v("#")]),t._v(" Component Type: Processor (Subcategory: Easy Reading)")]),t._v(" "),a("p",[t._v("Receives a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" string and "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field name as input and parses it into a\n"),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object to send one or more field values (several ones, only if the ``is true and\nother "),a("code",[t._v("jsonFieldName")]),t._v(" input values follow).")]),t._v(" "),a("h2",{attrs:{id:"input-port-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-port-description"}},[t._v("#")]),t._v(" Input Port Description")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("jsonInputString [string]")]),t._v(": The "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v("-formatted string to be converted into a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object.")]),t._v(" "),a("li",[a("strong",[t._v("jsonFieldName [string]")]),t._v(": The key/name of the "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object’s field, of which the value shall be sent to the output port (most recent name from this port is used, “” causes an error at "),a("code",[t._v("readNextField")]),t._v(" event).")]),t._v(" "),a("li",[t._v("** [oolean, default: true]**: Optional.\nIf connected, it overwrites the "),a("code",[t._v("keepParsedObject")]),t._v(" property.")])]),t._v(" "),a("h2",{attrs:{id:"output-port-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-port-description"}},[t._v("#")]),t._v(" Output Port Description")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("jsonFieldValue [string]")]),t._v(": The value of the "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field, identified by "),a("code",[t._v("jsonFieldName")]),t._v(", converted to a string (also "),a("code",[t._v('""')]),t._v(" is valid; an explicit "),a("code",[t._v("null")]),t._v(" is converted to "),a("code",[t._v('"null"')]),t._v(").\nIn case of failure, it will be "),a("code",[t._v('""')]),t._v(" and the "),a("code",[t._v("error")]),t._v(" port provides details.")]),t._v(" "),a("li",[a("strong",[t._v("latestReadFieldName [string]")]),t._v(": The name of the field whenever an attempt of reading a field value (from the parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object) has been completed.\nThis output can only be "),a("code",[t._v('""')]),t._v(" if the field name was "),a("code",[t._v('""|null|unset')]),t._v(", in which case the "),a("code",[t._v("error")]),t._v(" output port provides details.")]),t._v(" "),a("li",[a("strong",[t._v("error [string]")]),t._v(": Receives a value (different from "),a("code",[t._v('""')]),t._v(") whenever an attempt of input parsing or reading the next field fails.\nNo matter whether it is because of a missing "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object (as needed for reading a field but not previously parsed) or missing or invalid input port values.\nIt receives "),a("code",[t._v('""')]),t._v(" (= no error) at the next successful parse or read.\nThus it can be used for showing error messages.")])]),t._v(" "),a("h2",{attrs:{id:"event-listener-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-listener-description"}},[t._v("#")]),t._v(" Event Listener Description")]),t._v(" "),a("p",[t._v("For details on which errors are handled and error messages are provided for, see description of the "),a("code",[t._v("error")]),t._v(" output port and of the event triggers that cause an "),a("code",[t._v("error")]),t._v(" port output.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("parseInput")]),t._v(": Parses the most recently received value from the input port "),a("code",[t._v("jsonInputString")]),t._v(" into a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object - from which later the desired "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field (identified by the "),a("code",[t._v("jsonFieldName")]),t._v(" input) value is read and sent to the "),a("code",[t._v("jsonFieldValue")]),t._v(" output port.")]),t._v(" "),a("li",[a("strong",[t._v("readNextField")]),t._v(": Triggers the next attempt of reading the value of the currently desired "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field (identified by "),a("code",[t._v("jsonFieldName")]),t._v(") from an already parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object."),a("br"),t._v("\nThis event must be used after "),a("code",[t._v("parseInput")]),t._v(" (which must be repeated if "),a("code",[t._v("keepParsedObject")]),t._v(" is set to false).\n"),a("code",[t._v("parseInput")]),t._v(", in combination with a well-matched "),a("code",[t._v("keepParsedObject")]),t._v(" property/port, has to assure that there is already a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object from which values can be read when firing "),a("code",[t._v("readNextField")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("rejectParsedObject")]),t._v(": Unsets the parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object for the case that "),a("code",[t._v("keepParsedObject")]),t._v(" is true (via property or overwritten by input port value) or if it is false but no successful reading of any "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field has happened (see property description).")])]),t._v(" "),a("h2",{attrs:{id:"event-trigger-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-trigger-description"}},[t._v("#")]),t._v(" Event Trigger Description")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("inputParsed")]),t._v(": Triggers to indicate that the plugin is done with parsing the "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" input (string) into a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object.")]),t._v(" "),a("li",[a("strong",[t._v("fieldValueAvailable")]),t._v(": Triggers when the value of the desired "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field (specified by the input "),a("code",[t._v("jsonFieldName")]),t._v(" and now identified by the output "),a("code",[t._v("latestReadFieldName")]),t._v(") is available at the "),a("code",[t._v("jsonFieldValue")]),t._v(" output port."),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("Event Triggers that cause an "),a("code",[t._v("error")]),t._v(" port output")])])]),t._v(" "),a("li",[a("strong",[t._v("fieldValueNotFound")]),t._v(": Triggers when trying to read a field but when there is no field with the name given at the input port within the parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object (string).")]),t._v(" "),a("li",[a("strong",[t._v("fieldValueInvalidFormat")]),t._v(": Triggers when trying to read a field but when there has been an error returning the value of the desired "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" field.\nThe value has a wrong/an invalid format but is found (i.e. the key is existent).\nThis is the case whenever a found value cannot be parsed to a string (which is the output format at the output port "),a("code",[t._v("jsonFieldValue")]),t._v(").")]),t._v(" "),a("li",[a("strong",[t._v("invalidInputFormat")]),t._v(": Triggers when trying to parse the "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" input string but when it cannot be parsed into a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object (to later read values from).")]),t._v(" "),a("li",[a("strong",[t._v("missingJsonInput")]),t._v(": When trying to parse the "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" input string but when there has been no value at the input port "),a("code",[t._v("jsonInputString")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("missingFieldName")]),t._v(": Triggers when trying to read from an already parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object but when there has been no value at the input port "),a("code",[t._v("jsonFieldName")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("keepParsedObject [boolean, default: true]")]),t._v(": Specifies, whether to keep the parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object (the one resulting from the latest parsing of "),a("code",[t._v("jsonInputString")]),t._v(") until the next value appears at the "),a("code",[t._v("jsonInputString")]),t._v(" port – to read further fields in the meanwhile.")])]),t._v(" "),a("p",[a("em",[t._v("Usage Note")]),t._v(": If a field reading attempt fails, a "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object that has potentially been stored will not be unset, independently from the value of this property.\nThis is to assure that each "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" input delivers at least one field value or otherwise is replaced by the next "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" input.\nIn order to force the parsed "),a("abbr",{attrs:{title:"JavaScript Object Notation"}},[t._v("JSON")]),t._v(" object’s rejection, "),a("code",[t._v("rejectParsedObject")]),t._v(" must be triggered.")])])}),[],!1,null,null,null);e.default=i.exports}}]);