(window.webpackJsonp=window.webpackJsonp||[]).push([[364],{577:function(t,e,r){"use strict";r.r(e);var s=r(2),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"datetodouble"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#datetodouble"}},[t._v("#")]),t._v(" DateToDouble")]),t._v(" "),r("h2",{attrs:{id:"component-type-processor-subcategory-easy-reading"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#component-type-processor-subcategory-easy-reading"}},[t._v("#")]),t._v(" Component Type: Processor (Subcategory: Easy Reading)")]),t._v(" "),r("p",[t._v("Converts a date string to a Unix epoch timestamp in milliseconds, using the default time zone and a property-defined date format.")]),t._v(" "),r("h2",{attrs:{id:"input-ports"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#input-ports"}},[t._v("#")]),t._v(" Input Ports")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("dateString [string]")]),t._v(": Date string input to be converted using the date format given by the property.\nThe event "),r("code",[t._v("formatInput")]),t._v(" is also fired internally whenever this input port receives data.")])]),t._v(" "),r("h2",{attrs:{id:"output-ports"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#output-ports"}},[t._v("#")]),t._v(" Output Ports")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("timestampUnixMs [double]")]),t._v(": The converted Unix epoch timestamp in milliseconds.")])]),t._v(" "),r("h2",{attrs:{id:"event-listeners"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#event-listeners"}},[t._v("#")]),t._v(" Event Listeners")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("formatInput")]),t._v(": Initiates conversion for the current input date string, triggers "),r("code",[t._v("dateFormatted")]),t._v(" when done.")])]),t._v(" "),r("h2",{attrs:{id:"event-triggers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#event-triggers"}},[t._v("#")]),t._v(" Event Triggers")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("dateFormatted")]),t._v(": Triggers when an output value is available at the output port.")]),t._v(" "),r("li",[r("strong",[t._v("conversionFailed")]),t._v(": Triggers when a conversion attempt failed (might happen if inputs are missing or do not fit the specified date format).")])]),t._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("dateFormat [string, default: “dd.MM.yyyy-HH:mm:ss.SSS”]")]),t._v(": The format of the incoming date string.\nIt is used for conversion into a UNIX timestamp in milliseconds.\nIf invalid (according to "),r("code",[t._v("java.text.SimpleDateFormat")]),t._v(") or null, the default date format is tried.\nIf conversion fails because of missing or invalid input "),r("code",[t._v("conversionFailed")]),t._v(" is triggered.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);