(window.webpackJsonp=window.webpackJsonp||[]).push([[1153],{1965:function(e,t,r){"use strict";r.r(t);var i=r(1),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"linereader"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linereader"}},[e._v("#")]),e._v(" LineReader")]),e._v(" "),i("p",[e._v("Component Type: Sensor (Subcategory: File System)")]),e._v(" "),i("p",[e._v("This component reads lines from a text file and sends them to an output port. The line reading can be triggered by an incoming event.")]),e._v(" "),i("p",[i("img",{attrs:{src:r(3323),alt:"Screenshot: LineReader plugin",title:"Screenshot: LineReader plugin"}})]),e._v(" "),i("p",[e._v("ButtonGrid plugin")]),e._v(" "),i("h2",{attrs:{id:"input-port-description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#input-port-description"}},[e._v("#")]),e._v(" Input port Description")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("skipLines (integer):")]),e._v(" When an integer number is received at this port, the component tries to skip this number of lines. The next line will be read from the resulting position.")])]),e._v(" "),i("h2",{attrs:{id:"output-port-description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#output-port-description"}},[e._v("#")]),e._v(" Output port Description")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("actLine (string):")]),e._v(" A line of text which has been read from the file (as line termination character, the “enter”-key (\\n) is used.")])]),e._v(" "),i("h2",{attrs:{id:"event-listener-description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#event-listener-description"}},[e._v("#")]),e._v(" Event Listener Description")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("readNextLine:")]),e._v(" When this event is triggered, the component tries to read one line of text from the file and sends it to the output port.")]),e._v(" "),i("li",[i("strong",[e._v("resetToFirstLine:")]),e._v(" When this event is triggered, the internal file pointer is reset ot the beginning of the file.")])]),e._v(" "),i("h2",{attrs:{id:"event-trigger-description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#event-trigger-description"}},[e._v("#")]),e._v(" Event Trigger Description")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("endOfFile:")]),e._v(" This event is fired when no line can be read from the file (file end or other error occurred)")])]),e._v(" "),i("h2",{attrs:{id:"properties"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("fileName [string]:")]),e._v(" The full path and file name of the text file to read. The path can be given as absolute path or relative to the ARE executable’s directory")])])])}),[],!1,null,null,null);t.default=n.exports},3323:function(e,t,r){e.exports=r.p+"assets/img/LineReader.11a07801.jpg"}}]);