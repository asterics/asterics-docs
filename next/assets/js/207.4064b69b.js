(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{1054:function(e,r,t){e.exports=t.p+"assets/img/irmicro.b79a2e80.jpg"},629:function(e,r,t){"use strict";t.r(r);var o=t(1),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),o("h2",{attrs:{id:"component-type-processor-subcategory-home-control"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#component-type-processor-subcategory-home-control"}},[e._v("#")]),e._v(" Component Type: Processor (Subcategory: Home Control)")]),e._v(" "),o("p",[e._v("The IRMicro plugin connects to a Microcontroller via a COM port in order to receive and sent infrared (IR-) remote control commands (raw timing values). The values are stored in (or loded from) .csv file (one file per command, given the command’s name as filename.csv) in the ARE subfolder ./data/processor.IRMicro")]),e._v(" "),o("p",[o("img",{attrs:{src:t(1054),alt:"Screenshot: IrMicro plugin",title:"Screenshot: IrMicro plugin"}})]),e._v(" "),o("p",[e._v("IrMicro plugin")]),e._v(" "),o("h2",{attrs:{id:"requirements"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),o("p",[e._v("A connection to a microcontroller running the IrMicro firmware is required. The IrMicro firmware is provided in folder /CIMS/IrMicro. This firmware is an Arduino Sketch for record/replay of infrared commands. Connect a TSOP module (e.g. TSOP4838) to pin 11 and an IR led with current-limiting resistor to send pin of a compatible microcontroller (for examle pin 3 for the Arduino Uno). For a list of compatible controllers and default send pins see: "),o("a",{attrs:{href:"https://github.com/z3t0/Arduino-IRremote",target:"_blank",rel:"noopener noreferrer"}},[e._v("IR-Remote Github repository"),o("OutboundLink")],1)]),e._v(" "),o("h2",{attrs:{id:"input-port-description"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#input-port-description"}},[e._v("#")]),e._v(" Input Port Description")]),e._v(" "),o("ul",[o("li",[o("p",[o("strong",[e._v("sendName[string]:")]),e._v(" A string which contains a known command name. The existing (recorded) commands are stored in .csv files in the folder ARE/data/processor.IRMicro. If the command file is found, the stored timing codes are replayed by the connected microcontroller")])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("recordName[string]:")]),e._v(" A string which contains the name of a command which shall be recorded. The microcontroller is put into recording mode and waits (until a given timeout) for an IR code to be received via the TSOP module. After a command has been recorded, the codes are stored in a .csv file (filename is the command name) in the folder ARE/data/processor.IRMicro.")])])]),e._v(" "),o("h2",{attrs:{id:"output-port-description"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#output-port-description"}},[e._v("#")]),e._v(" Output Port Description")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("receivedName[string]:")]),e._v(" If a known IR command has been received via the microcontroller’s TSOP module, the command name is put out on this port as a string")]),e._v(" "),o("li",[o("strong",[e._v("receivedHex[string]:")]),e._v(" The timing values of a known or unknown command are sent to this output port as a string")])]),e._v(" "),o("h2",{attrs:{id:"event-listener-description"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#event-listener-description"}},[e._v("#")]),e._v(" Event Listener Description")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("clearAll:")]),e._v(" all stored IR-commands are cleared.")]),e._v(" "),o("li",[o("strong",[e._v("clearLast:")]),e._v(" the last recorded IR-command is cleared.")])]),e._v(" "),o("h2",{attrs:{id:"event-trigger-description"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#event-trigger-description"}},[e._v("#")]),e._v(" Event Trigger Description")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("recordFinished:")]),e._v(" a new command was recorded successfully.")]),e._v(" "),o("li",[o("strong",[e._v("recordTimeout:")]),e._v(" the timeout value was reched when trying to record a new command.")])]),e._v(" "),o("h2",{attrs:{id:"properties"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("ComPort[string]:")]),e._v(" The name of the Comunication port which shall be opened in order to communicte with the microcontroller.")]),e._v(" "),o("li",[o("strong",[e._v("Timeout[integer]:")]),e._v(" The timeout for recording a new IR-command (in milliseconds).")])])])}),[],!1,null,null,null);r.default=n.exports}}]);